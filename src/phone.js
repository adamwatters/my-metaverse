/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { DoubleSide } from "three";

export default function Model({ ...props }) {
  const group = useRef();
  const innerGroup = useRef();
  const { nodes, materials } = useGLTF("/phone.gltf");
  const [video] = useState(() => {
    const vid = document.createElement("video");
    vid.playsInline = true;
    vid.autoplay = true;
    vid.src = props.src;
    vid.muted = true;
    vid.crossOrigin = "Anonymous";
    vid.loop = true;
    return vid;
  });
  const [active, setActive] = useState(true);
  useEffect(() => {
    setTimeout(() => {
      video.play();
      setTimeout(() => {
        // video.pause();
      }, 500);
    }, 1000);
  }, [video]);
  useFrame(({ clock }) => {
    if (active && group.current.position.z < 0.4) {
      group.current.position.z += 0.01;
    }
    if (!active && group.current.position.z > 0) {
      group.current.position.z -= 0.01;
    }
    if (props.offsetAngle < 0) {
      if (
        active &&
        innerGroup.current.rotation.y < Math.PI + props.offsetAngle / 3
      ) {
        innerGroup.current.rotation.y = innerGroup.current.rotation.y + 0.01;
      }
      if (
        !active &&
        innerGroup.current.rotation.y > Math.PI + props.offsetAngle
      ) {
        innerGroup.current.rotation.y = innerGroup.current.rotation.y - 0.01;
      }
    }
    if (props.offsetAngle > 0) {
      if (
        active &&
        innerGroup.current.rotation.y > Math.PI + props.offsetAngle / 3
      ) {
        innerGroup.current.rotation.y = innerGroup.current.rotation.y - 0.01;
      }
      if (
        !active &&
        innerGroup.current.rotation.y < Math.PI + props.offsetAngle
      ) {
        innerGroup.current.rotation.y = innerGroup.current.rotation.y + 0.01;
      }
    }
    group.current.position.y = Math.sin(clock.elapsedTime) / 4;
    group.current.rotation.y = Math.sin(clock.elapsedTime / 3) / 5;
  });
  return (
    <group ref={group} position={[0, 0, 0]} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group
          ref={innerGroup}
          position={[0, 0, props.offsetVertical]}
          rotation={[Math.PI / 2, Math.PI + (props.offsetAngle || 0), 0]}
          scale={0.04}
        >
          <group scale={100}>
            <mesh
              geometry={nodes.Apple_Logo_Logo_0.geometry}
              material={materials.Logo}
            />
            <mesh
              geometry={nodes.Body_Bezel_0.geometry}
              material={materials.Bezel}
            />
            <mesh
              geometry={nodes.Body_Body_0.geometry}
              material={nodes.Body_Body_0.material}
            />
            <mesh
              geometry={nodes.Body_Camera_Glass_0.geometry}
              material={nodes.Body_Camera_Glass_0.material}
            />
            <mesh
              geometry={nodes.Body_Lens_0.geometry}
              material={nodes.Body_Lens_0.material}
            />
            <mesh
              geometry={nodes.Body_Material_0.geometry}
              material={materials["Material.001"]}
            />
            <mesh
              geometry={nodes.Body_Mic_0.geometry}
              material={nodes.Body_Mic_0.material}
            />
            <mesh geometry={nodes.Body_Wallpaper_0.geometry}>
              <meshStandardMaterial
                side={DoubleSide}
                emissive="white"
                emissiveIntensity={0.1}
              >
                <videoTexture attach="map" args={[video]} />
                <videoTexture attach="emissiveMap" args={[video]} />
              </meshStandardMaterial>
            </mesh>
            <mesh
              geometry={nodes.Body001_Screen_Glass_0.geometry}
              material={materials.Screen_Glass}
            />
            <mesh
              geometry={nodes.Button_Frame_0.geometry}
              material={nodes.Button_Frame_0.material}
            />
            <mesh
              geometry={nodes.Camera_Body_0.geometry}
              material={nodes.Camera_Body_0.material}
            />
            <mesh
              geometry={nodes.Camera_Camera_Frame001_0.geometry}
              material={materials["Camera_Frame.001"]}
            />
            <mesh
              geometry={nodes.Camera_Glass_0.geometry}
              material={materials.Glass}
            />
            <mesh
              geometry={nodes.Camera_Mic_0.geometry}
              material={nodes.Camera_Mic_0.material}
            />
            <mesh
              geometry={nodes.Camera001_Black_Glass_0.geometry}
              material={materials.Black_Glass}
            />
            <mesh
              geometry={nodes.Camera001_Body_0.geometry}
              material={nodes.Camera001_Body_0.material}
            />
            <mesh
              geometry={nodes.Camera001_Camera_Frame_0.geometry}
              material={materials.Camera_Frame}
            />
            <mesh
              geometry={nodes.Camera001_Camera_Glass_0.geometry}
              material={nodes.Camera001_Camera_Glass_0.material}
            />
            <mesh
              geometry={nodes.Camera001_Flash_0.geometry}
              material={materials.Flash}
            />
            <mesh
              geometry={nodes.Camera001_Gray_Glass_0.geometry}
              material={materials.Gray_Glass}
            />
            <mesh
              geometry={nodes.Camera001_Lens_0.geometry}
              material={nodes.Camera001_Lens_0.material}
            />
            <mesh
              geometry={nodes.Camera001_Port_0.geometry}
              material={nodes.Camera001_Port_0.material}
            />
            <mesh
              geometry={nodes.Camera003_Material002_0.geometry}
              material={materials["Material.002"]}
            />
            <mesh
              geometry={nodes.Circle003_Frame_0.geometry}
              material={nodes.Circle003_Frame_0.material}
            />
            <mesh
              geometry={nodes.Frame_Antenna_0.geometry}
              material={materials.Antenna}
            />
            <mesh
              geometry={nodes.Frame_Frame2_0.geometry}
              material={materials.Frame2}
            />
            <mesh
              geometry={nodes.Frame_Frame_0.geometry}
              material={nodes.Frame_Frame_0.material}
            />
            <mesh
              geometry={nodes.Frame_Mic_0.geometry}
              material={nodes.Frame_Mic_0.material}
            />
            <mesh
              geometry={nodes.Frame_Port_0.geometry}
              material={nodes.Frame_Port_0.material}
            />
          </group>
        </group>
      </group>
    </group>
  );
}
